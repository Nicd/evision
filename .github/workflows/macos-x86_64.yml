name: macos-x86_64

on:
  pull_request:
    paths-ignore:
      - '*.md'
      - '**/*.md'
      - 'LICENSE*'
      - 'examples/**'
      - 'nerves/**'
      - 'Makefile.win'
      - 'cc_toolchain/**'
      - 'checksum.exs'
      - '.github/FUNDING.yml'
      - '.github/workflows/nerves-*.yml'
      - '.github/workflows/linux-*.yml'
      - '.github/workflows/windows-*.yml'
      - '.github/workflows/test-*.yml'
      - '.github/workflows/macos-precompile.yml'
  push:
    branches:
      - main
      - test-*
    paths-ignore:
      - '*.md'
      - '**/*.md'
      - 'LICENSE*'
      - 'examples/**'
      - 'nerves/**'
      - 'Makefile.win'
      - 'cc_toolchain/**'
      - 'checksum.exs'
      - '.github/FUNDING.yml'
      - '.github/workflows/nerves-*.yml'
      - '.github/workflows/linux-*.yml'
      - '.github/workflows/windows-*.yml'
      - '.github/workflows/test-*.yml'
      - '.github/workflows/macos-precompile.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  mix_test:
    runs-on: macos-11
    env:
      OPENCV_VER: "4.7.0"
      MIX_ENV: "test"
      EVISION_PREFER_PRECOMPILED: "false"

    steps:
      - uses: actions/checkout@v3

      - name: Install FFmpeg4, Erlang and Elixir
        run: |
          brew install erlang elixir ffmpeg@4
          brew link ffmpeg@4
          mix local.hex --force
          mix local.rebar --force

      - name: Cache mix packages
        id: cache-mix-deps
        uses: actions/cache@v3
        with:
          key: deps-${{ hashFiles('mix.lock') }}
          path: |
            ./deps

      - name: Get mix deps
        if: steps.cache-mix-deps.outputs.cache-hit != 'true'
        run: |
          mix deps.get

      - name: Cache OpenCV source code
        id: cache-opencv
        uses: actions/cache@v3
        with:
          key: opencv-with-contrib-${{ env.OPENCV_VER }}
          path: |
            ./3rd_party

      - name: Download OpenCV source code
        if: steps.cache-opencv.outputs.cache-hit != 'true'
        run: |
          bash scripts/download_opencv.sh ${OPENCV_VER} 3rd_party/cache 3rd_party/opencv/
          bash scripts/download_opencv_contrib.sh ${OPENCV_VER} 3rd_party/cache 3rd_party/opencv/

      - name: Cache compiled OpenCV
        id: cache-mix-compile_opencv
        uses: actions/cache@v3
        with:
          key: compile-with-ffmpeg-opencv-${{ env.OPENCV_VER }}-x86_64-apple-darwin-${{ hashFiles('Makefile') }}-${{ hashFiles('py_src/*.py') }}
          path: |
            ./_build/${{ env.MIX_ENV }}/lib/evision
            ./c_src/headers.txt
            ./c_src/configuration.private.hpp

      - name: Compile OpenCV
        if: steps.cache-mix-compile_opencv.outputs.cache-hit != 'true'
        run: |
          mix compile_opencv

      - name: Mix Compile
        run: |
          rm -f _build/test/lib/evision/priv/evision.so

          mkdir -p lib/generated
          mkdir -p src/generated
          cat c_src/headers.txt
          python3 py_src/gen2.py c_src lib/generated src/generated c_src/headers.txt elixir

          mix compile

      - name: Compile once again but without optional deps
        run: mix compile --force --warnings-as-errors --no-optional-deps

      - name: Cache testdata
        id: cache-mix-testdata
        uses: actions/cache@v3
        with:
          key: testdata-${{ hashFiles('test/downloading_list.txt') }}
          path: |
            ./test/testdata

      - name: Mix Test
        run: |
          ulimit -c unlimited
          /usr/libexec/PlistBuddy -c "Add :com.apple.security.get-task-allow bool true" tmp.entitlements
          export ERL_BASE="$(dirname $(dirname $(which erl)))"
          export BEAM_SMP="$(find "${ERL_BASE}" -name beam.smp)"
          codesign -s - -f --entitlements tmp.entitlements "${BEAM_SMP}"
          find ./test -name '*_test.exs' -exec bash -c "echo {} && mix test --include require_downloading --include require_ffmpeg {}" \;
          ls -lah

      - name: Create precompiled library
        run: |
          export PKG_NAME=evision-nif_${NIF_VERSION}-${{ matrix.pair.arch_name }}-apple-darwin-${GITHUB_REF##*/v}
          mkdir -p "${PKG_NAME}"
          cp -a _build/${MIX_ENV}/lib/evision/priv "${PKG_NAME}"
          cp -a lib/generated "${PKG_NAME}/elixir_generated"
          cp -a src/generated "${PKG_NAME}/erlang_generated"
          cp -a core.* "${PKG_NAME}/"
          tar -czf "${PKG_NAME}.tar.gz" "${PKG_NAME}"
          rm -rf "${PKG_NAME}"
          ls -lah "${PKG_NAME}.tar.gz"
          mkdir -p artifacts
          mv "${PKG_NAME}.tar.gz" artifacts

      - uses: actions/upload-artifact@v3
        with:
          name: macos-dev-artifact
          path: artifacts/*.tar.gz
