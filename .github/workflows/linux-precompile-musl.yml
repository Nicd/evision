name: linux-precompile-musl

on:
  push:
    tags:
      - 'v*'

jobs:
  alpine:
    runs-on: ubuntu-20.04
    container: alpine:latest
    env:
      MIX_ENV: test
      OPENCV_VER: "4.6.0"
    steps:
      - uses: actions/checkout@v3
      - name: Install system dependecies
        run: |
          apk add cmake make python3 bash curl unzip gcc g++ ncurses-dev openssl-dev linux-headers perl git ffmpeg ffmpeg-dev dpkg
          curl -fSL https://repo.uwucocoa.moe/pool/main/erlang_25.0.4_musl-linux-amd64.deb -o erlang_25.0.4_musl-linux-amd64.deb
          dpkg -i erlang_25.0.4_musl-linux-amd64.deb

      - name: Install elixir
        run: |
          export ELIXIR_VER=1.13.4
          mkdir -p "${HOME}/.elixir"
          cd "${HOME}/.elixir"
          curl -fSL https://github.com/elixir-lang/elixir/archive/refs/tags/v${ELIXIR_VER}.tar.gz -o v${ELIXIR_VER}.tar.gz
          tar xf "v${ELIXIR_VER}.tar.gz"
          rm -f "v${ELIXIR_VER}.tar.gz"
          cd "elixir-${ELIXIR_VER}"
          make clean
          make install

      - name: Cache mix packages and OpenCV
        id: cache-mix-and-opencv
        uses: actions/cache@v3
        with:
          key: deps-${{ hashFiles('mix.lock') }}-${{ env.OPENCV_VER }}
          path: |
            ./deps
            ./3rd_party

      - name: Get mix deps and download OpenCV
        if: steps.cache-mix-and-opencv.outputs.cache-hit != 'true'
        run: |
          export ELIXIR_VER=1.13.4
          export PATH="${PATH}:${HOME}/.elixir/elixir-${ELIXIR_VER}/bin"
          mix local.hex --force
          mix local.rebar --force
          mix deps.get
          bash scripts/download_opencv.sh ${OPENCV_VER} 3rd_party/cache 3rd_party/opencv/

      - name: Cache compiled OpenCV
        id: cache-mix-compile
        uses: actions/cache@v3
        with:
          key: precompile-${{ runner.os }}-x86_64-linux-musl-${{ hashFiles('cc_toolchain/**') }}-${{ hashFiles('c_src/**') }}-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('Makefile') }}-${{ env.OPENCV_VER }}
          path: |
            ./_build
            ./c_src/headers.txt
            ./c_src/configuration.private.hpp
            ./lib
            ./src

      - name: Mix compile
        if: steps.cache-mix-compile.outputs.cache-hit != 'true'
        run: |
          rm -f _build
          export PATH="${PATH}:${HOME}/.elixir/elixir-${ELIXIR_VER}/bin"
          mix compile

      - name: Create precompiled library
        run: |
          export PKG_NAME=evision-x86_64-linux-musl-${GITHUB_REF##*/v}
          export PATH="${PATH}:${HOME}/.elixir/elixir-${ELIXIR_VER}/bin"
          mkdir -p "${PKG_NAME}"
          cp -a _build/dev/lib/evision/priv "${PKG_NAME}"
          cp -a lib/generated "${PKG_NAME}/elixir_generated"
          cp -a src/generated "${PKG_NAME}/erlang_generated"
          tar -czf "${PKG_NAME}.tar.gz" "${PKG_NAME}"
          rm -rf "${PKG_NAME}"
          ls -lah "${PKG_NAME}.tar.gz"
          mkdir -p artifacts
          mv "${PKG_NAME}.tar.gz" artifacts

      - uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*.tar.gz

  zig_build:
    runs-on: ubuntu-20.04
    env:
      OPENCV_VER: "4.6.0"
    strategy:
      fail-fast: false
      matrix:
        arch: [aarch64-linux-musl, riscv64-linux-musl]

    steps:
      - uses: actions/checkout@v3

      - name: Install OTP and Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: "25.0.4"
          elixir-version: "1.13.4"

      - name: Install Zig
        uses: goto-bus-stop/setup-zig@v1
        with:
          version: "0.8.0"

      - name: Install system dependecies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential automake autoconf pkg-config bc m4 unzip zip curl git libssl-dev gzip libncurses5-dev python3 ca-certificates

      - name: Cache mix packages and OpenCV
        id: cache-mix-and-opencv
        uses: actions/cache@v3
        with:
          key: deps-${{ hashFiles('mix.lock') }}-${{ env.OPENCV_VER }}
          path: |
            ./deps
            ./3rd_party

      - name: Get mix deps and download OpenCV
        if: steps.cache-mix-and-opencv.outputs.cache-hit != 'true'
        run: |
          mix deps.get
          bash scripts/download_opencv.sh ${OPENCV_VER} 3rd_party/cache 3rd_party/opencv/

      - name: Cache compiled OpenCV
        id: cache-mix-compile
        uses: actions/cache@v3
        with:
          key: precompile-${{ runner.os }}-${{ matrix.arch }}-${{ hashFiles('cc_toolchain/**') }}-${{ hashFiles('c_src/**') }}-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('Makefile') }}-${{ env.OPENCV_VER }}
          path: |
            ./_build
            ./c_src/headers.txt
            ./c_src/configuration.private.hpp
            ./lib
            ./src

      - name: Mix compile
        if: steps.cache-mix-compile.outputs.cache-hit != 'true'
        run: |
          export CMAKE_TOOLCHAIN_FILE="$(pwd)/cc_toolchain/${{ matrix.arch }}.cmake"
          echo "CMAKE_TOOLCHAIN_FILE: ${CMAKE_TOOLCHAIN_FILE}"
          export ZIG_TOOLCHAIN_PATH="$(which zig)"
          rm -f _build/dev/lib/evision/priv/evision.so
          mix compile

      - name: Create precompiled library
        run: |
          export PKG_NAME=evision-${{ matrix.arch }}-${GITHUB_REF##*/v}
          mkdir -p "${PKG_NAME}"
          cp -a _build/dev/lib/evision/priv "${PKG_NAME}"
          cp -a lib/generated "${PKG_NAME}/elixir_generated"
          cp -a src/generated "${PKG_NAME}/erlang_generated"
          tar -czf "${PKG_NAME}.tar.gz" "${PKG_NAME}"
          rm -rf "${PKG_NAME}"
          ls -lah "${PKG_NAME}.tar.gz"
          mkdir -p artifacts
          mv "${PKG_NAME}.tar.gz" artifacts

      - uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*.tar.gz
