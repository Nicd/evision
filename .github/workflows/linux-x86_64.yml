name: linux-x86_64

on:
  pull_request:
    paths-ignore:
      - '**/README.md'
      - 'LICENSE*'
      - 'examples/**'
      - 'nerves/**'
      - 'Makefile.win'
      - 'cc_toolchain/**'
      - '.github/FUNDING.yml'
      - '.github/workflows/nerves-*'
      - '.github/workflows/macos-*'
      - '.github/workflows/windows-*'
      - '.github/workflows/test-*.yml'
      - '.github/workflows/linux-arm64.yml'
      - '.github/workflows/linux-armv7.yml'
      - '.github/workflows/linux-ppc64le.yml'
      - '.github/workflows/linux-s390x.yml'
      - '.github/workflows/linux-precompile.yml'
  push:
    branches:
      - main
      - feature-*
      - experimental-*
      - test-*
      - fix-*
    paths-ignore:
      - '**/README.md'
      - 'LICENSE*'
      - 'examples/**'
      - 'nerves/**'
      - 'Makefile.win'
      - 'cc_toolchain/**'
      - '.github/FUNDING.yml'
      - '.github/workflows/nerves-*'
      - '.github/workflows/macos-*'
      - '.github/workflows/windows-*'
      - '.github/workflows/test-*.yml'
      - '.github/workflows/linux-arm64.yml'
      - '.github/workflows/linux-armv7.yml'
      - '.github/workflows/linux-ppc64le.yml'
      - '.github/workflows/linux-s390x.yml'
      - '.github/workflows/linux-precompile.yml'
  workflow_dispatch:

jobs:
  musl:
    runs-on: ubuntu-latest
    container: alpine:latest
    env:
      MIX_ENV: test
      OPENCV_VER: "4.6.0"
    steps:
      - uses: actions/checkout@v3
      - name: Install system dependecies
        run: |
          apk add cmake make python3 bash curl unzip gcc g++ ncurses-dev openssl-dev linux-headers perl git ffmpeg ffmpeg-dev dpkg
          curl -fSL https://repo.uwucocoa.moe/pool/main/erlang_25.0.4_musl-linux-amd64.deb -o erlang_25.0.4_musl-linux-amd64.deb
          dpkg -i erlang_25.0.4_musl-linux-amd64.deb
      - name: Install elixir
        run: |
          export ELIXIR_VER=1.13.4
          mkdir -p "${HOME}/.elixir/v${ELIXIR_VER}"
          cd "${HOME}/.elixir/v${ELIXIR_VER}"
          curl -fSL "https://github.com/elixir-lang/elixir/releases/download/v${ELIXIR_VER}/Precompiled.zip" -o "elixir-${ELIXIR_VER}.zip"
          unzip "elixir-${ELIXIR_VER}.zip"
          rm -f "elixir-${ELIXIR_VER}.zip"
      - name: Cache mix packages and OpenCV
        id: cache-mix-and-opencv
        uses: actions/cache@v3
        with:
          key: deps-${{ hashFiles('mix.lock') }}-${{ env.OPENCV_VER }}
          path: |
            ./deps
            ./3rd_party
      - name: Get mix deps and download OpenCV
        if: steps.cache-mix-and-opencv.outputs.cache-hit != 'true'
        run: |
          export ELIXIR_VER=1.13.4
          export PATH="${PATH}:${HOME}/.elixir/v${ELIXIR_VER}/bin"
          mix deps.get
          bash scripts/download_opencv.sh ${OPENCV_VER} 3rd_party/cache 3rd_party/opencv/
      - name: Mix Compile
        run: |
          rm -f _build/test/lib/evision/priv/evision.so
          echo "MIX_ENV: ${MIX_ENV}"
          export MIX_ENV=test
          mix compile
      - name: Mix Test
        run: |
          mix test --include require_downloading --include require_ffmpeg

  gnu:
    runs-on: ubuntu-20.04
    env:
      MIX_ENV: test
      OPENCV_VER: "4.6.0"

    steps:
      - uses: actions/checkout@v3
      
      - uses: erlef/setup-beam@v1
        with:
          otp-version: "25.0.4"
          elixir-version: "1.13.4"

      - name: Install system dependecies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential automake autoconf pkg-config bc m4 unzip zip curl git libssl-dev gzip libncurses5-dev erlang-inets erlang-os-mon erlang-runtime-tools erlang-ssl erlang-dev python3 ca-certificates
          sudo apt-get install -y libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libavresample-dev ffmpeg
      
      - name: Cache mix packages and OpenCV
        id: cache-mix-and-opencv
        uses: actions/cache@v3
        with:
          key: deps-${{ hashFiles('mix.lock') }}-${{ env.OPENCV_VER }}
          path: |
            ./deps
            ./3rd_party

      - name: Get mix deps and download OpenCV
        if: steps.cache-mix-and-opencv.outputs.cache-hit != 'true'
        run: |
          mix deps.get
          bash scripts/download_opencv.sh ${OPENCV_VER} 3rd_party/cache 3rd_party/opencv/

      - name: Cache compiled OpenCV
        id: cache-mix-compile
        uses: actions/cache@v3
        with:
          key: compile-ffmpeg-${{ runner.os }}-${{ hashFiles('cc_toolchain/**') }}-${{ hashFiles('c_src/**') }}-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('Makefile') }}-${{ env.OPENCV_VER }}
          path: |
            ./_build
            ./c_src/headers.txt
            ./c_src/configuration.private.hpp
            ./lib
            ./src

      - name: Mix Compile
        run: |
          rm -f _build/test/lib/evision/priv/evision.so
          mix compile

      - name: Mix Test
        run: |
          mix test --include require_downloading --include require_ffmpeg
