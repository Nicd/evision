name: linux-x86_64

on:
  pull_request:
    paths-ignore:
      - '**/README.md'
      - 'examples/**'
      - 'nerves/**'
      - 'Makefile.win'
      - '.github/FUNDING.yml'
      - '.github/workflows/nerves-*'
      - '.github/workflows/macos-*'
      - '.github/workflows/windows-*'
      - '.github/workflows/test-*.yml'
      - '.github/workflows/linux-arm64.yml'
      - '.github/workflows/linux-armv7.yml'
      - '.github/workflows/linux-ppc64le.yml'
      - '.github/workflows/linux-s390x.yml'
  push:
    tags:
      - '*-dev'
      - '*-prod'
    branches:
      - main
      - feature-*
      - experimental-*
      - test-*
      - fix-*
    paths-ignore:
      - '**/README.md'
      - 'examples/**'
      - 'nerves/**'
      - 'Makefile.win'
      - '.github/FUNDING.yml'
      - '.github/workflows/nerves-*'
      - '.github/workflows/macos-*'
      - '.github/workflows/windows-*'
      - '.github/workflows/test-*.yml'
      - '.github/workflows/linux-arm64.yml'
      - '.github/workflows/linux-armv7.yml'
      - '.github/workflows/linux-ppc64le.yml'
      - '.github/workflows/linux-s390x.yml'
  workflow_dispatch:

jobs:
  mix_test:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - pair:
              elixir: 1.13.2
              otp: 24.2
              opencv_ver: 4.5.5
              upload: false
              mix_env: test
              evision_version: 0.1.0-dev
          - pair:
              elixir: 1.13.2
              otp: 24.2
              opencv_ver: 4.5.5
              upload: true
              mix_env: dev
              evision_version: 0.1.0-dev

    steps:
      - uses: actions/checkout@v2
      
      - uses: erlef/setup-beam@v1
        with:
          otp-version: ${{matrix.pair.otp}}
          elixir-version: ${{matrix.pair.elixir}}
      
      - name: Install system dependecies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential automake autoconf pkg-config bc m4 unzip zip curl git libssl-dev gzip libncurses5-dev erlang-inets erlang-os-mon erlang-runtime-tools erlang-ssl erlang-dev python3 ca-certificates
          sudo apt-get install -y libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libavresample-dev ffmpeg

      - name: Build precompiled library
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          export OPENCV_VER=${{ matrix.pair.opencv_ver }}
          export MIX_ENV=${{ matrix.pair.mix_env }}
          mix deps.get
          MAKE_BUILD_FLAGS="-j$(nproc)" mix compile

      - name: mix compile for CI test
        run: |
          if [ "${{ matrix.pair.mix_env }}" = "test" ]; then
            export OPENCV_VER=${{ matrix.pair.opencv_ver }}
            export MIX_ENV=${{ matrix.pair.mix_env }}
            mix deps.get
            MAKE_BUILD_FLAGS="-j$(nproc)" mix compile
          fi

      - name: Mix Test
        run: |
          if [ "${{ matrix.pair.mix_env }}" = "test" ]; then
            export OPENCV_VER=${{ matrix.pair.opencv_ver }}
            mix test --include require_downloading --include require_ffmpeg
          fi

      - name: Create precompiled package
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          if [ "${{ matrix.pair.upload }}" = "true" ]; then
            export PKG_NAME=evision-linux-x86_64-${{ matrix.pair.evision_version }}
            echo "pkg_name=${PKG_NAME}.tar.gz" >> $GITHUB_ENV
            mkdir -p "${PKG_NAME}"
            cp -a _build/${{ matrix.pair.mix_env }}/lib/evision/priv "${PKG_NAME}"
            cp -a lib/generated "${PKG_NAME}"
            tar -czf "${PKG_NAME}.tar.gz" "${PKG_NAME}"
            rm -rf "${PKG_NAME}"
            ls -lah "${PKG_NAME}.tar.gz"
          else
            echo "skipped"
          fi

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ env.pkg_name }}
